@model AspnetCoreMvcFull.ViewModels.MaintenanceManagement.MaintenanceCalendarViewModel
@{
  ViewData["Title"] = "Maintenance Calendar";
  Layout = "_ContentNavbarLayout";

  // Calculate the days of the week for the date range
  List<DateTime> days = new List<DateTime>();
  DateTime currentDate = Model.StartDate;
  while (currentDate <= Model.EndDate)
  {
    days.Add(currentDate);
    currentDate = currentDate.AddDays(1);
  }

  // Get the previous and next week dates
  DateTime prevWeekStart = Model.StartDate.AddDays(-7);
  DateTime nextWeekStart = Model.StartDate.AddDays(7);

  // Color palette for up to 5 shifts
  var shiftColors = new[] { "primary", "success", "warning", "danger", "info" };
}

<div class="card">
  @* <div class="card-header"> *@

  <div class="card-body">
    <!-- Calendar Navigation -->
    <div class="row mb-4">
      <div class="col-12 d-flex justify-content-between align-items-center">
        <div>
          @* Small screens (icon only) *@
            <a href="@Url.Action("Calendar", "Maintenance", new { start = prevWeekStart })"
               class="btn btn-icon btn-outline-primary d-sm-none @(Model.StartDate == DateTime.Today ? "disabled" : "")">
              <span class="tf-icons bx bx-chevron-left"></span>
            </a>
            @* Medium+ screens (icon + text) *@
            <a href="@Url.Action("Calendar", "Maintenance", new { start = prevWeekStart })"
               class="btn btn-outline-primary d-none d-sm-inline-flex align-items-center gap-1 @(Model.StartDate == DateTime.Today ? "disabled" : "")">
              <span class="tf-icons bx bx-chevron-left"></span><span>Previous Week</span>
            </a>
        </div>
        <div class="text-center">
          <h5 class="card-title mb-0">@Model.StartDate.ToString("MMMM d, yyyy") - @Model.EndDate.ToString("MMMM d, yyyy")</h6>
        </div>
        <div>
          @* Small screens (icon only) *@
            <a href="@Url.Action("Calendar", "Maintenance", new { start = nextWeekStart })"
               class="btn btn-icon btn-outline-primary d-sm-none">
              <span class="tf-icons bx bx-chevron-right"></span>
            </a>
            @* Medium+ screens (icon + text) *@
            <a href="@Url.Action("Calendar", "Maintenance", new { start = nextWeekStart })"
               class="btn btn-outline-primary d-none d-sm-inline-flex align-items-center gap-1">
              <span>Next Week</span><span class="tf-icons bx bx-chevron-right"></span>
            </a>
        </div>
      </div>
    </div>

    <!-- Calendar Legend -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="d-flex flex-wrap gap-3">
          @for (int i = 0; i < Model.ShiftDefinitions.Count; i++)
          {
            var shift = Model.ShiftDefinitions[i];
            var color = shiftColors[i % shiftColors.Length];
            <div class="d-flex align-items-center">
              <span class="badge bg-@color me-1">&nbsp;</span>
              <small>@shift.Name (@shift.FormattedStartTime - @shift.FormattedEndTime)</small>
            </div>
          }
        </div>
      </div>
    </div>

    <!-- Calendar Table -->
    <div class="table-responsive">
      <table class="table table-bordered">
        <thead>
          <tr>
            <th style="width: 150px;">Crane</th>
            @foreach (var day in days)
            {
              <th>
                <div>@day.ToString("ddd")</div>
                <div>@day.ToString("MMM d")</div>
              </th>
            }
          </tr>
        </thead>
        <tbody>
          @foreach (var crane in Model.Cranes)
          {
            <tr>
              <td class="align-middle">
                <strong>@crane.Code</strong>
                <div class="small text-muted">@crane.Capacity ton</div>
              </td>

              @foreach (var day in days)
              {
                <td>
                  @{
                    // Find maintenance shift events for this crane and date
                    var eventsForDay = Model.ShiftEvents
                    .Where(e => e.CraneId == crane.Id && e.Date.Date == day.Date)
                    .ToList();
                  }

                  @if (eventsForDay.Any())
                  {
                    @foreach (var ev in eventsForDay)
                    {
                      var shiftIndex = Model.ShiftDefinitions.FindIndex(sd => sd.Id == ev.ShiftDefinitionId);
                      var color = shiftIndex >= 0 ? shiftColors[shiftIndex % shiftColors.Length] : "primary";
                      <div class="maintenance-event mb-1">
                        <a href="@Url.Action("Details", "Maintenance", new { documentNumber = ev.DocumentNumber })"
                          class="btn btn-sm bg-@color text-white w-100 text-start">
                          <i class="bx bx-wrench me-1"></i>
                          <span class="small d-inline-block text-truncate" style="max-width: 120px;">
                            @ev.Title
                          </span>
                        </a>
                      </div>
                    }
                  }
                  else
                  {
                    <div class="text-center py-1">
                      <a href="@Url.Action("Index", "Maintenance", new { craneId = crane.Id, startDate = day.ToString("yyyy-MM-dd") })"
                        class="btn btn-sm btn-outline-primary btn-icon">
                        <i class="bx bx-plus"></i>
                      </a>
                    </div>
                  }
                </td>
              }
            </tr>
          }
        </tbody>
      </table>
    </div>
    @* </div> *@
  </div>
</div>

@section PageStyles {
  <style>
    .maintenance-event .btn {
      white-space: normal;
    }
  </style>
}
