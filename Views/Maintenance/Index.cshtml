@model AspnetCoreMvcFull.ViewModels.MaintenanceManagement.MaintenanceFormViewModel
@using System.Security.Claims
@{
  ViewData["Title"] = "Maintenance Schedule";
  Layout = "_ContentNavbarLayout";

  var userName = User.FindFirst(ClaimTypes.Name)?.Value ?? "User";
  var userDepartment = User.FindFirst("department")?.Value ?? "";
}

@section PageStyles {
  <style>
    .shift-status {
      font-size: 0.75rem;
      margin-top: 2px;
    }

    .shift-status.available {
      color: green;
    }

    .shift-status.booked {
      color: red;
    }

    .shift-status.maintenance {
      color: orange;
    }

    /* Shift selection table tweaks */
    .shift-selection .form-check {
      flex-direction: row !important;
      gap: 0.25rem;
    }

    .shift-selection .form-check-label {
      display: none;
    }
  </style>
}

<div class="row">
  <div class="col-12">
    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Create Maintenance Schedule</h5>
        <div>
          <a href="@Url.Action("Index", "MaintenanceHistory")" class="btn btn-outline-secondary me-2">
            <i class="bx bx-list-ul me-1"></i> History
          </a>
          <a href="@Url.Action("Calendar", "Maintenance")" class="btn btn-primary">
            <i class="bx bx-calendar me-1"></i> Calendar View
          </a>
        </div>
      </div>
      <div class="card-body">
        <form id="maintenanceForm" action="@Url.Action("Create", "Maintenance")" method="post">
          @Html.AntiForgeryToken()
          <div class="row mb-3">
            <div class="col-md-6">
              <label class="form-label required-label">Requestor Name</label>
              <input id="createdBy" name="createdBy" class="form-control" value="@userName" required readonly />
              <small class="text-muted">Automatically filled based on your login information</small>
            </div>
            <div class="col-md-6">
              <label class="form-label required-label">Department Name</label>
              <input id="department" name="department" class="form-control" value="@userDepartment" required readonly />
              <small class="text-muted">Automatically filled based on your login information</small>
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
              <label class="form-label" for="craneId">Crane</label>
              <select class="form-select" id="craneId" name="CraneId" required>
                <option value="">-- Select Crane --</option>
                @foreach (var crane in Model.AvailableCranes)
                {
                  <option value="@crane.Id" selected="@(((int?)ViewBag.DefaultCraneId == crane.Id) ? "selected" : null)">
                    @crane.Code (@crane.Capacity ton)</option>
                }
              </select>
            </div>
            <div class="col-md-6">
              <label class="form-label" for="title">Title</label>
              <input type="text" class="form-control" id="title" name="Title" placeholder="e.g. Monthly Maintenance"
                required />
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
              <label class="form-label" for="startDate">Start Date</label>
              <input type="date" class="form-control" id="startDate" name="StartDate" value="@ViewBag.DefaultStartDate"
                required />
            </div>
            <div class="col-md-6">
              <label class="form-label" for="endDate">End Date</label>
              <input type="date" class="form-control" id="endDate" name="EndDate" value="@ViewBag.DefaultEndDate"
                required />
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-12">
              <label class="form-label" for="description">Description</label>
              <textarea class="form-control" id="description" name="Description" rows="3"
                placeholder="Optional description"></textarea>
            </div>
          </div>

          <!-- Shift Selection Section -->
          <div class="row mt-4">
            <div class="col-12">
              <h6>Shift Selection</h6>
              <div class="alert alert-info" role="alert">
                <i class="bx bx-info-circle me-1"></i>
                Please select shifts for each day in the maintenance period.
              </div>
              <div id="shiftSelectionContainer" class="mb-3">
                <p id="dateRangeMessage" class="text-muted mb-3">
                  Select date range to display shift selection
                </p>
                <div id="shiftSelectionTable" class="shift-selection" style="display: none;">
                  <!-- Will be filled dynamically -->
                </div>
              </div>
            </div>
          </div>

          <div class="row mt-4">
            <div class="col-12 d-flex justify-content-end">
              <button type="button" id="resetFormBtn" class="btn btn-outline-secondary me-3">
                <i class="bx bx-reset me-1"></i> Reset
              </button>
              <button type="submit" class="btn btn-primary">
                <i class="bx bx-save me-1"></i> Create Maintenance Schedule
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Validation Modal -->
<div class="modal fade" id="validationModal" tabindex="-1" aria-labelledby="validationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="validationModalLabel">Validation Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Please select at least one shift for each day in the maintenance period.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>

@section PageScripts {
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Default values passed from server
      const defaultCraneId = '@(ViewBag.DefaultCraneId ?? "")';
      const defaultStartDate = '@(ViewBag.DefaultStartDate ?? "")';
      const defaultEndDate = '@(ViewBag.DefaultEndDate ?? "")';

      const startDateInput = document.getElementById('startDate');
      const endDateInput = document.getElementById('endDate');
      const craneIdSelect = document.getElementById('craneId');
      const shiftSelectionTable = document.getElementById('shiftSelectionTable');
      const dateRangeMessage = document.getElementById('dateRangeMessage');
      const resetFormBtn = document.getElementById('resetFormBtn');
      const maintenanceForm = document.getElementById('maintenanceForm');

      // JS default no longer needed as values are rendered server-side
      @* if (defaultCraneId) {
        craneIdSelect.value = defaultCraneId;
      }
      if (defaultStartDate) {
        startDateInput.value = defaultStartDate;
      }
      if (defaultEndDate) {
        endDateInput.value = defaultEndDate;
      } *@

                          // ✅ PERBAIKAN: Auto-clear TempData untuk alerts
                          const successAlert = document.getElementById('successAlert');
      const errorAlert = document.getElementById('errorAlert');

      // Function untuk membersihkan TempData
      function clearMaintenanceTempData() {
        fetch('/Maintenance/ClearTempData', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
          }
        }).catch(error => {
          console.log('TempData clear failed:', error);
        });
      }

      // ✅ Auto-clear setelah success alert ditampilkan
      if (successAlert) {
        // Clear TempData setelah 3 detik
        setTimeout(() => {
          clearMaintenanceTempData();
        }, 3000);

        // Clear TempData ketika alert di-close manual
        successAlert.addEventListener('closed.bs.alert', function () {
          clearMaintenanceTempData();
        });
      }

      // ✅ Auto-clear setelah error alert ditampilkan (hanya jika tidak ada success)
      if (errorAlert && !successAlert) {
        // Clear TempData setelah 5 detik (lebih lama untuk error)
        setTimeout(() => {
          clearMaintenanceTempData();
        }, 5000);

        // Clear TempData ketika alert di-close manual
        errorAlert.addEventListener('closed.bs.alert', function () {
          clearMaintenanceTempData();
        });
      }

      // ✅ Clear TempData jika ada flag CleanTempData tapi tidak ada alert
      @if (ViewData["CleanTempData"] != null && ViewData["CleanTempData"] as bool? == true)
        {
          <text>
            if (!successAlert && !errorAlert) {
              clearMaintenanceTempData();
                                                                  }
          </text>
      }

                                  // If no defaults from server, initialize to today and first crane
                                const today = new Date();
      if (!startDateInput.value) {
        startDateInput.value = formatDateForInput(today);
      }
      if (!endDateInput.value) {
        endDateInput.value = formatDateForInput(today);
      }
      if (craneIdSelect && !craneIdSelect.value && craneIdSelect.options.length > 1) {
        craneIdSelect.selectedIndex = 1;
      }

      // Initialize shift definitions
      const shiftDefinitions = @Html.Raw(Json.Serialize(Model.ShiftDefinitions));
      let bookedShifts = [];
      let maintenanceShifts = [];

      function isShiftBooked(craneId, date, shiftId) {
        if (!bookedShifts || !bookedShifts.length || !craneId) return false;
        const dateStr = new Date(date).toISOString().split('T')[0];
        return bookedShifts.some(item => item.craneId === parseInt(craneId) && item.date.split('T')[0] === dateStr && item.shiftDefinitionId === shiftId);
      }

      function isShiftMaintenance(craneId, date, shiftId) {
        if (!maintenanceShifts || !maintenanceShifts.length || !craneId) return false;
        const dateStr = new Date(date).toISOString().split('T')[0];
        return maintenanceShifts.some(item => item.craneId === parseInt(craneId) && item.date.split('T')[0] === dateStr && item.shiftDefinitionId === shiftId);
      }

      // Event listeners for date & crane changes
      startDateInput.addEventListener('change', updateShiftSelectionTable);
      endDateInput.addEventListener('change', updateShiftSelectionTable);
      if (craneIdSelect) {
        craneIdSelect.addEventListener('change', updateShiftSelectionTable);
      }

      // Reset form event handler
      resetFormBtn.addEventListener('click', resetForm);

      // Form submission handler
      maintenanceForm.addEventListener('submit', validateForm);

      // Initialize the shift selection table
      updateShiftSelectionTable();

      // Function to format date for input field
      function formatDateForInput(date) {
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
      }

      // Function to update the shift selection table
      async function updateShiftSelectionTable() {
        const startDate = new Date(startDateInput.value);
        const endDate = new Date(endDateInput.value);

        // Validate date range
        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
          dateRangeMessage.textContent = 'Please select valid dates';
          shiftSelectionTable.style.display = 'none';
          return;
        }

        if (startDate > endDate) {
          dateRangeMessage.textContent = 'Start date must be before or equal to end date';
          shiftSelectionTable.style.display = 'none';
          return;
        }

        // Fetch shift availability data
        const craneIdSelect = document.getElementById('craneId');
        const craneId = craneIdSelect ? craneIdSelect.value : '';
        try {
          const bookedResponse = await fetch(`/Booking/GetBookedShifts?craneId=${craneId}&startDate=${startDateInput.value}&endDate=${endDateInput.value}`);
          bookedShifts = bookedResponse.ok ? await bookedResponse.json() : [];
          const maintenanceResponse = await fetch(`/Booking/GetMaintenanceShifts?craneId=${craneId}&startDate=${startDateInput.value}&endDate=${endDateInput.value}`);
          maintenanceShifts = maintenanceResponse.ok ? await maintenanceResponse.json() : [];
        } catch (error) {
          bookedShifts = [];
          maintenanceShifts = [];
        }

        // Create date range
        const dateRange = [];
        let currentDate = new Date(startDate);
        while (currentDate <= endDate) {
          dateRange.push(new Date(currentDate));
          currentDate.setDate(currentDate.getDate() + 1);
        }

        // Build dynamic header columns for each shift
        const headerShiftCols = shiftDefinitions.map(shift => `<th>${shift.name}<br><small>${shift.formattedStartTime} - ${shift.formattedEndTime}</small></th>`).join('');

        // Hide message and show table
        dateRangeMessage.style.display = 'none';
        shiftSelectionTable.style.display = 'block';

        // Create table HTML
        let tableHtml = `
                                      <div class="table-responsive">
                                        <table class="table table-bordered align-middle text-center">
                                          <thead>
                                            <tr>
                                              <th>Date</th>
                                              <th>Day</th>
                                              ${headerShiftCols}
                                            </tr>
                                          </thead>
                                          <tbody>
                                    `;

        // Create rows for each date
        dateRange.forEach((date, index) => {
          const formattedDate = date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          });
          const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });
          const dateString = formatDateForInput(date);

          tableHtml += `
                                        <tr>
                                          <td>${formattedDate}<input type="hidden" name="ShiftSelections[${index}].Date" value="${dateString}"></td>
                                          <td>${dayOfWeek}</td>
                                      `;

          // Create checkboxes for each shift
          shiftDefinitions.forEach(shift => {
            const isBooked = isShiftBooked(craneId, dateString, shift.id);
            const isMaintenance = isShiftMaintenance(craneId, dateString, shift.id);

            let statusText = 'Available';
            let statusClass = 'available';
            let disabledAttr = '';

            if (isBooked) {
              statusText = 'Booked';
              statusClass = 'booked';
              disabledAttr = 'disabled';
            } else if (isMaintenance) {
              statusText = 'Maintenance';
              statusClass = 'maintenance';
              disabledAttr = 'disabled';
            }

            tableHtml += `
                                          <td>
                                            <div class="form-check d-flex justify-content-center flex-column align-items-center">
                                              <input class="form-check-input" type="checkbox"
                                                id="shift_${index}_${shift.id}"
                                                name="ShiftSelections[${index}].SelectedShiftIds" value="${shift.id}" ${disabledAttr}>
                                              <span class="shift-status ${statusClass}">${statusText}</span>
                                            </div>
                                          </td>
                                        `;
          });

          tableHtml += `
                                        </tr>
                                      `;
        });

        tableHtml += `
                                          </tbody>
                                        </table>
                                      </div>
                                    `;

        // Add table to DOM
        shiftSelectionTable.innerHTML = tableHtml;
      }

      // Function to reset the form
      function resetForm() {
        maintenanceForm.reset();

        // Reset date inputs to default values
        const now = new Date();
        startDateInput.value = formatDateForInput(now);
        endDateInput.value = formatDateForInput(now);

        // Reset crane selection to first option
        if (craneIdSelect && craneIdSelect.options.length > 1) {
          craneIdSelect.selectedIndex = 1;
        }

        // Update shift selection table
        updateShiftSelectionTable();
      }

      // Function to validate form before submission
      function validateForm(event) {
        // Get all date rows
        const dateRows = document.querySelectorAll('#shiftSelectionTable tbody tr');
        let valid = true;

        // Check each date has at least one shift selected
        dateRows.forEach((row, index) => {
          const checkboxes = row.querySelectorAll('input[type="checkbox"]:checked');
          if (checkboxes.length === 0) {
            valid = false;
            // Mark row as error
            row.classList.add('table-danger');
          } else {
            row.classList.remove('table-danger');
          }
        });

        if (!valid) {
          event.preventDefault();
          const validationModal = new bootstrap.Modal(document.getElementById('validationModal'));
          validationModal.show();
        }
      }
    });
  </script>
}
