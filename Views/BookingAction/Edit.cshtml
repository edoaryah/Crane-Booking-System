@model AspnetCoreMvcFull.ViewModels.BookingManagement.BookingUpdateViewModel
@{
  ViewData["Title"] = "Edit Booking";
  Layout = "_ContentNavbarLayout";

  var isPicEdit = ViewBag.IsPicEdit as bool? ?? false;
  var isCreatorEdit = ViewBag.IsCreatorEdit as bool? ?? false;
  var currentStatus = ViewBag.CurrentStatus as AspnetCoreMvcFull.Models.BookingStatus?;
  var documentNumber = ViewBag.DocumentNumber as string ?? "";
  var bookingId = ViewBag.BookingId as int? ?? 0;
  var bookingNumber = ViewBag.BookingNumber as string ?? "";

  // Map booking status to consistent badge color and English text
  string statusClass = "bg-secondary";
  string statusText = currentStatus?.ToString() ?? "";

  if (currentStatus.HasValue)
  {
      switch (currentStatus.Value)
      {
          case AspnetCoreMvcFull.Models.BookingStatus.PendingApproval:
              statusClass = "bg-warning";
              statusText = "Pending Approval";
              break;
          case AspnetCoreMvcFull.Models.BookingStatus.ManagerApproved:
              statusClass = "bg-info";
              statusText = "Manager Approved";
              break;
          case AspnetCoreMvcFull.Models.BookingStatus.PICApproved:
              statusClass = "bg-success";
              statusText = "PIC Approved";
              break;
          case AspnetCoreMvcFull.Models.BookingStatus.ManagerRejected:
              statusClass = "bg-danger";
              statusText = "Rejected by Manager";
              break;
          case AspnetCoreMvcFull.Models.BookingStatus.PICRejected:
              statusClass = "bg-danger";
              statusText = "Rejected by PIC";
              break;
          case AspnetCoreMvcFull.Models.BookingStatus.Cancelled:
              statusClass = "bg-secondary";
              statusText = "Cancelled";
              break;
          case AspnetCoreMvcFull.Models.BookingStatus.Done:
              statusClass = "bg-primary";
              statusText = "Completed";
              break;
      }
  }
}

@section PageStyles {
  <style>
    .required-label:after {
      content: " *";
      color: red;
    }

    .hazard-checkbox {
      margin-right: 5px;
    }

    .form-section+.form-section {
      margin-top: 2rem;
    }

    .form-section-title {
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #ddd;
    }

    .edit-info-card {
      background: linear-gradient(45deg, #e3f2fd, #f3e5f5);
      border-left: 4px solid #2196f3;
    }

    .pic-edit-info {
      background: linear-gradient(45deg, #fff3e0, #fce4ec);
      border-left: 4px solid #ff9800;
    }

    /* CSS untuk menjadikan kolom tombol trash fit content */
    #itemsTableContainer .table th:last-child,
    #itemsTableContainer .table td:last-child {
      white-space: nowrap !important;
      padding-right: 20px;
    }

    #itemsTableContainer {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
    }

    #itemsTableContainer .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    /* CSS untuk Shift Selection table */
    #shiftTableContainer {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
    }

    #shiftTableContainer .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    #shiftTableContainer .table th:not(:first-child),
    #shiftTableContainer .table td:not(:first-child) {
      text-align: center;
    }

    #shiftTableContainer .form-check {
      display: flex;
      justify-content: flex-start;
      margin: 0;
      display: flex;
      justify-content: center;
      margin: 0;
    }

    /* CSS for Hazards Card */
    #hazardsCardContainer {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
      padding: 20px;
    }

    #hazardsContainer .col-md-4 {
      margin-bottom: 10px;
    }

    .shift-status {
      display: block;
      font-size: 0.75rem;
      margin-top: 4px;
    }

    .shift-status.available {
      color: #198754;
    }

    .shift-status.booked {
      color: #dc3545;
    }

    .shift-status.maintenance {
      color: #fd7e14;
    }

    /* Styles for image management */
    .image-management-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .existing-image-wrapper {
        position: relative;
        width: 150px;
        height: 150px;
    }

    .existing-image-wrapper img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 4px;
    }

    .remove-image-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        z-index: 10;
    }

    #newImagePreviewContainer .img-preview {
        width: 150px;
        height: 150px;
        object-fit: cover;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px;
    }

    #Description.form-control {
      height: auto;
    }
  </style>
}

<div class="row">
  <div class="col-12">
    <!-- Edit Context Information -->
    <div class="card mb-4 @(isPicEdit ? "pic-edit-info" : "edit-info-card")">
      <div class="card-body">
        <div class="d-flex align-items-center">
          <i class="bx @(isPicEdit ? "bx-wrench" : "bx-edit-alt") me-3" style="font-size: 2rem;"></i>
          <div>
            <h6 class="mb-1">
              @if (isPicEdit)
              {
                <text><strong>PIC Edit Mode</strong></text>
              }
              else
              {
                <text><strong>Revision Mode</strong></text>
              }
            </h6>
            <p class="mb-0 text-muted">
              @if (isPicEdit)
              {
                <text>Sebagai PIC, Anda dapat mengedit booking ini. Perubahan akan langsung berlaku tanpa perlu approval ulang.</text>
              }
              else
              {
                <text>Booking ini telah ditolak. Silakan revisi sesuai feedback dan submit ulang untuk approval.</text>
              }
            </p>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">
        <div class="d-flex flex-column flex-md-row justify-content-md-between align-items-md-center">
          <h5 class="mb-0">
            Edit Booking
            @if (!string.IsNullOrEmpty(bookingNumber))
            {
              <span class="text-muted">Booking No: @bookingNumber</span>
            }
          </h5>
          <div class="mt-1 mt-md-0 d-flex align-items-center">
            <span class="badge @statusClass">@statusText</span>
          </div>
        </div>
      </div>
      <div class="card-body">
        <form id="editBookingForm" asp-controller="BookingAction" asp-action="Edit" asp-route-documentNumber="@documentNumber" method="post" enctype="multipart/form-data">
          @Html.AntiForgeryToken()

          <input type="hidden" id="shiftDefinitionsData"
            value="@System.Text.Json.JsonSerializer.Serialize(ViewBag.ShiftDefinitions)" />

          <!-- Requestor Information Section -->
          <div class="form-section">
            <h6 class="form-section-title">Requestor Information</h6>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label required-label">Requestor Name</label>
                <input asp-for="Name" class="form-control" required readonly />
                <small class="text-muted">Tidak dapat diubah</small>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label required-label">Department Name</label>
                <input asp-for="Department" class="form-control" required readonly />
                <small class="text-muted">Tidak dapat diubah</small>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label required-label">Supervisor Name</label>
                <input asp-for="ProjectSupervisor" class="form-control" required />
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label required-label">Phone Number</label>
                <input asp-for="PhoneNumber" class="form-control" placeholder="e.g. 081242005757" required
                  type="tel" pattern="[0-9]*" inputmode="numeric"
                  oninput="this.value = this.value.replace(/[^0-9]/g, '');" />
              </div>
            </div>

            <div class="row">
              <div class="col-md-6">
                <label class="form-label required-label">Cost Code</label>
                <input asp-for="CostCode" class="form-control" required />
              </div>
            </div>
          </div>

          <!-- Booking Details Section -->
          <div class="form-section">
            <h6 class="form-section-title">Booking Details</h6>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="StartDate" class="form-label required-label">Start Date</label>
                <input asp-for="StartDate" type="date" class="form-control" required />
                <span asp-validation-for="StartDate" class="text-danger"></span>
              </div>
              <div class="col-md-6 mb-3">
                <label for="EndDate" class="form-label required-label">End Date</label>
                <input asp-for="EndDate" type="date" class="form-control" required />
                <span asp-validation-for="EndDate" class="text-danger"></span>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label required-label">Crane</label>
                <select asp-for="CraneId" class="form-select" required>
                  <option value="">Select a Crane</option>
                  @if (ViewBag.AvailableCranes != null)
                  {
                    @foreach (var crane in (IEnumerable<AspnetCoreMvcFull.ViewModels.CraneManagement.CraneViewModel>)ViewBag.AvailableCranes)
                    {
                      if (crane.Status == AspnetCoreMvcFull.Models.CraneStatus.Available)
                      {
                        <option value="@crane.Id" selected="@(crane.Id == Model.CraneId)">@crane.Code (@crane.Capacity ton)</option>
                      }
                      else
                      {
                        <option value="@crane.Id" disabled selected="@(crane.Id == Model.CraneId)">@crane.Code (@crane.Capacity ton) - Under Maintenance</option>
                      }
                    }
                  }
                </select>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label required-label">Location</label>
                <input asp-for="Location" class="form-control" required />
              </div>
            </div>

            <!-- Shift Selection Table -->
            <div class="row">
              <div class="col-12">
                <label id="shiftLabel" class="form-label required-label">Shift Selections</label>
                <div id="shiftTableContainer" class="card">
                  <div class="table-responsive text-nowrap">
                    <table class="table table-hover">
                      <thead class="table-border-top-0">
                        <tr>
                          <th>Date</th>
                          @if (ViewBag.ShiftDefinitions != null)
                          {
                            @foreach (var shift in ((IEnumerable<AspnetCoreMvcFull.ViewModels.ShiftManagement.ShiftViewModel>)ViewBag.ShiftDefinitions).Where(s => s.IsActive).OrderBy(s => s.StartTime))
                            {
                              <th class="text-start ps-3" data-shift-id="@shift.Id" data-shift-name="@shift.Name"
                                data-shift-start="@shift.FormattedStartTime" data-shift-end="@shift.FormattedEndTime"
                                data-shift-is-active="@shift.IsActive.ToString().ToLower()">
                                @shift.Name<br /><small class="text-muted">@shift.TimeRange</small>
                              </th>
                            }
                          }
                        </tr>
                      </thead>
                      <tbody class="table-border-bottom-0" id="shiftTableBody">
                        <!-- Shift rows will be populated by JavaScript -->
                      </tbody>
                    </table>
                  </div>
                </div>
                <span class="text-danger d-none" id="shiftTableError"></span>
              </div>
            </div>
          </div>

          <!-- Job Details Section -->
          <div class="form-section">
            <h6 class="form-section-title">Job Details</h6>
            <div class="row">
              <div class="col-12">
                <label class="form-label required-label">Job Description</label>
                <textarea asp-for="Description" class="form-control" rows="3" required></textarea>
              </div>
            </div>
          </div>

          <!-- Items to be Lifted Section -->
          <div class="form-section">
            <h6 class="form-section-title">Items to be Lifted</h6>
            <div class="row">
              <div class="col-12">
                <div id="itemsTableContainer" class="card">
                  <div class="table-responsive text-nowrap">
                    <table class="table table-hover">
                      <thead class="table-border-top-0">
                        <tr>
                          <th style="width: 40%; min-width: 220px; padding-right: 5px;">Item Name (p x l x t)</th>
                          <th style="width: 15%; min-width: 140px; padding-right: 5px;">Height of Lifting (m)</th>
                          <th style="width: 15%; min-width: 140px; padding-right: 5px;">Weight (ton)</th>
                          <th style="width: 15%; min-width: 140px; padding-right: 5px;">Quantity</th>
                          <th style="width: 1%; white-space: nowrap;"></th>
                        </tr>
                      </thead>
                      <tbody id="liftedItemsBody">
                        <!-- Items will be populated by JavaScript -->
                      </tbody>
                      <tfoot class="table-border-bottom-0">
                        <tr>
                          <td colspan="5">
                            <button type="button" id="addItemBtn" class="btn btn-outline-primary btn-sm">
                              <i class="bx bx-plus"></i> Add Another Item
                            </button>
                          </td>
                        </tr>
                      </tfoot>
                    </table>
                  </div>
                </div>
                <span class="text-danger d-none" id="liftedItemsError"></span>
              </div>
            </div>
          </div>

          <!-- Photo Upload Section -->
          <div class="form-section">
            <h6 class="form-section-title">Area/Item Photos</h6>
            <div class="row">
              <div class="col-12">
                <label class="form-label">Existing Photos</label>
                <!-- <div id="existingImagesContainer" class="image-management-container">
                  @if (Model.ExistingImagePaths != null && Model.ExistingImagePaths.Any())
                  {
                    foreach (var imagePath in Model.ExistingImagePaths)
                    {
                      <div class="existing-image-wrapper" data-image-path="@imagePath">
                        <img src="@Url.Content(imagePath)" alt="Existing Image" class="img-thumbnail" />
                        <button type="button" class="btn btn-danger btn-sm remove-image-btn" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal" data-image-path="@imagePath">
                          <i class="bx bx-trash"></i>
                        </button>
                      </div>
                    }
                  }
                  else
                  {
                    <p id="no-existing-images-msg">No existing photos.</p>
                  }
                </div> -->
                <div id="existingImagesContainer" class="image-management-container">
                @if (Model.ExistingImagePaths != null)
                    {
                        foreach (var imagePath in Model.ExistingImagePaths)
                        {
                            <div class="existing-image-wrapper" data-image-path="@imagePath">
                                <img src="@Url.Content(imagePath)" alt="Existing Image" class="img-thumbnail" />
                                <button type="button" class="btn btn-danger btn-sm remove-image-btn" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal" data-image-path="@imagePath">
                                    <i class="bx bx-trash"></i>
                                </button>
                            </div>
                        }
                    }
                </div>
                <p id="no-existing-images-msg" style="@(Model.ExistingImagePaths == null || !Model.ExistingImagePaths.Any() ? "" : "display: none;")">No existing photos.</p>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <label for="newImages" class="form-label">Add New Photos</label>
                <input asp-for="NewImages" type="file" class="form-control" multiple id="newImages" accept="image/*" />
                <div id="newImagePreviewContainer" class="mt-2"></div>
              </div>
            </div>
          </div>

          <!-- Hazards Section -->
          <div class="form-section">
            <h6 class="form-section-title">Potential Hazards</h6>
            <div class="row">
              <div class="col-12 mb-6">
                <div id="hazardsCardContainer" class="card">
                  <div class="table-responsive">
                    <div id="hazardsContainer" class="row">
                      @if (ViewBag.Hazards != null)
                      {
                        @foreach (var hazard in (IEnumerable<AspnetCoreMvcFull.ViewModels.HazardManagement.HazardViewModel>)ViewBag.Hazards)
                        {
                          <div class="col-md-4 mb-2">
                            <div class="form-check">
                              <input class="form-check-input hazard-checkbox" type="checkbox" name="HazardIds[]"
                                id="hazard-@hazard.Id" value="@hazard.Id"
                                @(Model.HazardIds != null && Model.HazardIds.Contains(hazard.Id) ? "checked" : "") />
                              <label class="form-check-label" for="hazard-@hazard.Id">
                                @hazard.Name
                              </label>
                            </div>
                          </div>
                        }
                      }
                    </div>

                    <div class="custom-hazard">
                      <label class="form-label">Custom Hazard (Optional)</label>
                      <input asp-for="CustomHazard" class="form-control"
                        placeholder="Specify any other hazards not listed above" />
                    </div>
                  </div>
                </div>
                <span class="text-danger d-none" id="hazardsError"></span>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="form-section">
              <div class="row">
                <div class="col-12 d-flex justify-content-between">
                  <a href="@Url.Action("Details", "Booking", new { documentNumber = documentNumber })" class="btn btn-secondary">
                    <i class="bx bx-arrow-back me-1"></i> Cancel
                  </a>
                  <button type="submit" id="submitButton" class="btn btn-primary">
                    <i class="bx bx-save me-1"></i>
                    @if (isPicEdit)
                    {
                      <text>Update Booking</text>
                    }
                    else
                    {
                      <text>Submit Revision</text>
                    }
                  </button>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this image?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
      </div>
    </div>
  </div>
</div>

@section PageScripts {
  <!-- Toastify CSS & JS -->
  <link rel="stylesheet" href="~/vendor/libs/toastify/toastify.min.css">
  <script src="~/vendor/libs/toastify/toastify-js.js"></script>
  <script>
    function showToast(title, message, type = 'error') {
      Toastify({
        text: title + ': ' + message,
        duration: 5000,
        close: true,
        gravity: 'top',
        position: 'right',
        style: {
          background: type === 'success' ? '#198754' : '#dc3545',
          borderRadius: '0.5rem'
        }
      }).showToast();
    }
  </script>
  <script>
    let shiftDefinitions = [];
    let bookedShifts = [];
    let maintenanceShifts = [];
    let existingShiftSelections = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ShiftSelections ?? new List<AspnetCoreMvcFull.ViewModels.BookingManagement.DailyShiftSelectionViewModel>()));
    let existingItems = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Items ?? new List<AspnetCoreMvcFull.ViewModels.BookingManagement.BookingItemCreateViewModel>()));

    const startDateInput = document.getElementById('StartDate');
    const endDateInput = document.getElementById('EndDate');
    const shiftTableContainer = document.getElementById('shiftTableContainer');
    const shiftTableBody = document.getElementById('shiftTableBody');
    const submitButton = document.getElementById('submitButton');
    const craneIdSelect = document.getElementById('CraneId');
    const addItemBtn = document.getElementById('addItemBtn');
    const editBookingForm = document.getElementById('editBookingForm');
    const shiftLabel = document.getElementById('shiftLabel');

    // Ambil booking ID yang sedang diedit
    const currentBookingId = @(ViewBag.BookingId ?? 0);

    function loadShiftDefinitions() {
      try {
        const shiftDefinitionsInput = document.getElementById('shiftDefinitionsData');
        if (shiftDefinitionsInput && shiftDefinitionsInput.value) {
          shiftDefinitions = JSON.parse(shiftDefinitionsInput.value);
          return true;
        }

        const shiftHeaders = document.querySelectorAll('#shiftTableContainer thead th[data-shift-id]');
        if (shiftHeaders && shiftHeaders.length > 0) {
          shiftDefinitions = Array.from(shiftHeaders).map(header => {
            return {
              id: parseInt(header.dataset.shiftId),
              name: header.dataset.shiftName,
              formattedStartTime: header.dataset.shiftStart,
              formattedEndTime: header.dataset.shiftEnd,
              timeRange: `${header.dataset.shiftStart} - ${header.dataset.shiftEnd}`,
              isActive: header.dataset.shiftIsActive === 'true'
            };
          });
          return true;
        }
        return false;
      } catch (error) {
        console.error('Error loading shift definitions:', error);
        return false;
      }
    }

    // Cek apakah shift sudah dibooking
    function isShiftBooked(craneId, date, shiftId) {
      if (!bookedShifts || !bookedShifts.length || !craneId) return false;

      const dateStr = new Date(date).toISOString().split('T')[0];

      return bookedShifts.some(booking =>
        booking.craneId === parseInt(craneId) &&
        booking.date.split('T')[0] === dateStr &&
        booking.shiftDefinitionId === shiftId
      );
    }

    // Cek apakah shift sedang maintenance
    function isShiftMaintenance(craneId, date, shiftId) {
      if (!maintenanceShifts || !maintenanceShifts.length || !craneId) return false;

      const dateStr = new Date(date).toISOString().split('T')[0];

      return maintenanceShifts.some(maintenance =>
        maintenance.craneId === parseInt(craneId) &&
        maintenance.date.split('T')[0] === dateStr &&
        maintenance.shiftDefinitionId === shiftId
      );
    }

    function validateDates() {
      if (!startDateInput || !endDateInput) return false;

      const startDate = new Date(startDateInput.value);
      const endDate = new Date(endDateInput.value);

      if (!startDateInput.value || !endDateInput.value) return false;
      if (startDate > endDate) return false;

      return true;
    }

    // Generate shift table dengan status checking
    async function generateShiftTable() {
      if (!shiftTableContainer || !shiftLabel || !startDateInput || !endDateInput || !craneIdSelect) {
        return;
      }

      const startDate = startDateInput.value;
      const endDate = endDateInput.value;
      const craneId = craneIdSelect.value;

      if (!startDate || !endDate || !craneId) {
        shiftTableContainer.style.display = 'none';
        shiftLabel.style.display = 'none';
        return;
      }

      if (!validateDates()) {
        shiftTableContainer.style.display = 'none';
        shiftLabel.style.display = 'none';
        return;
      }

      if (!shiftDefinitions || shiftDefinitions.length === 0) {
        if (!loadShiftDefinitions()) {
          return;
        }
      }

      try {
        // Kirim excludeBookingId untuk mengecualikan booking yang sedang diedit
        const response = await fetch(`/Booking/GetBookedShifts?craneId=${craneId}&startDate=${startDate}&endDate=${endDate}&excludeBookingId=${currentBookingId}`);
        if (response.ok) {
          bookedShifts = await response.json();
        } else {
          bookedShifts = [];
        }

        const maintenanceResponse = await fetch(`/Booking/GetMaintenanceShifts?craneId=${craneId}&startDate=${startDate}&endDate=${endDate}`);
        if (maintenanceResponse.ok) {
          maintenanceShifts = await maintenanceResponse.json();
        } else {
          maintenanceShifts = [];
        }
      } catch (error) {
        console.error('Error fetching shift data:', error);
        bookedShifts = [];
        maintenanceShifts = [];
      }

      const activeShifts = shiftDefinitions.filter(s =>
        s.IsActive === true || s.isActive === true
      );

      const start = new Date(startDate);
      const end = new Date(endDate);
      const dateArray = [];

      let currentDate = new Date(start);
      while (currentDate <= end) {
        const dateStr = new Date(currentDate).toISOString().split('T')[0];

        // Handle both lowercase and uppercase property names
        let existingSelection = null;

        if (existingShiftSelections && Array.isArray(existingShiftSelections)) {
          existingSelection = existingShiftSelections.find(s => {
            if (!s) return false;

            // Try both lowercase and uppercase property names
            const dateProperty = s.date || s.Date;

            if (!dateProperty) return false;

            // Handle both Date object and string formats
            let selectionDateStr = '';
            if (typeof dateProperty === 'string') {
              selectionDateStr = dateProperty.split('T')[0];
            } else if (dateProperty instanceof Date) {
              selectionDateStr = dateProperty.toISOString().split('T')[0];
            } else {
              return false;
            }

            return selectionDateStr === dateStr;
          });
        }

        // Handle both property name formats for selectedShiftIds
        let selectedShiftIds = [];
        if (existingSelection) {
          selectedShiftIds = existingSelection.selectedShiftIds ||
                            existingSelection.SelectedShiftIds ||
                            [];
        }

        dateArray.push({
          date: dateStr,
          selectedShiftIds: selectedShiftIds
        });
        currentDate.setDate(currentDate.getDate() + 1);
      }

      shiftTableContainer.style.display = 'block';
      shiftLabel.style.display = 'block';

      renderShiftTableBody(dateArray, craneId);
    }

    // Render shift table dengan status
    function renderShiftTableBody(shiftTable, craneId) {
      if (!shiftTableBody) {
        return;
      }

      shiftTableBody.innerHTML = '';

      const activeShifts = shiftDefinitions.filter(s =>
        s.IsActive === true || s.isActive === true
      );

      shiftTable.forEach((dayShift, index) => {
        const dateObj = new Date(dayShift.date);
        const formattedDate = dateObj.toLocaleDateString('en-US', {
          weekday: 'short',
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });

        const row = document.createElement('tr');
        row.dataset.date = dayShift.date;

        const dateCell = document.createElement('td');
        dateCell.textContent = formattedDate;
        row.appendChild(dateCell);

        activeShifts.forEach(shift => {
          const shiftId = shift.Id || shift.id;
          const isSelected = dayShift.selectedShiftIds.includes(shiftId);

          // Cek status availability
          const isBooked = isShiftBooked(craneId, dayShift.date, shiftId);
          const isMaintenance = isShiftMaintenance(craneId, dayShift.date, shiftId);

          let statusText = "Available";
          let statusClass = "available";
          let isDisabled = false;

          if (isBooked) {
            statusText = "Booked";
            statusClass = "booked";
            isDisabled = true;
          } else if (isMaintenance) {
            statusText = "Maintenance";
            statusClass = "maintenance";
            isDisabled = true;
          }

          const cell = document.createElement('td');
          cell.innerHTML = `
            <div class="form-check d-flex align-items-center gap-1 justify-content-start ps-3">
              <input type="checkbox" class="form-check-input shift-checkbox"
                id="shift-${shiftId}-${dayShift.date}"
                name="shiftSelections[${index}].selectedShiftIds[]"
                value="${shiftId}"
                data-date="${dayShift.date}"
                data-shift-id="${shiftId}"
                ${isSelected ? 'checked' : ''}
                ${isDisabled ? 'disabled' : ''} />
              <span class="shift-status ms-1 ${statusClass}">
                ${statusText}
              </span>
              <input type="hidden" name="shiftSelections[${index}].date" value="${dayShift.date}" />
            </div>
          `;

          row.appendChild(cell);
        });

        shiftTableBody.appendChild(row);
      });
    }

    function initLiftedItemsTable() {
      const tbody = document.getElementById('liftedItemsBody');
      if (!tbody) return;

      tbody.innerHTML = '';

      if (existingItems && Array.isArray(existingItems) && existingItems.length > 0) {
        existingItems.forEach((item, index) => {
          addLiftedItemRow(item, index);
        });
      } else {
        addLiftedItemRow();
      }
    }

    function addLiftedItemRow(itemData = null, index = null) {
      const tbody = document.getElementById('liftedItemsBody');
      if (!tbody) return;

      const rowIndex = index !== null ? index : tbody.rows.length;
      const row = document.createElement('tr');

      // Handle both lowercase and uppercase property names
      const itemName = itemData ? (itemData.itemName || itemData.ItemName || '') : '';
      const height = itemData ? (itemData.height || itemData.Height || '') : '';
      const weight = itemData ? (itemData.weight || itemData.Weight || '') : '';
      const quantity = itemData ? (itemData.quantity || itemData.Quantity || 1) : 1;

      row.innerHTML = `
        <td style="min-width: 220px; padding-right: 5px;">
          <input type="text" class="form-control item-name"
                name="items[${rowIndex}].itemName"
                value="${itemName}" required />
        </td>
        <td style="min-width: 140px; padding-right: 5px;">
          <input type="text" class="form-control item-height" pattern="^[0-9]+(\\.[0-9]+)?$"
                name="items[${rowIndex}].height"
                value="${height}"
                min="0.01" step="0.01" placeholder="e.g 12.5" inputmode="decimal" required />
        </td>
        <td style="min-width: 140px; padding-right: 5px;">
          <input type="text" class="form-control item-weight" pattern="^[0-9]+(\\.[0-9]+)?$"
                name="items[${rowIndex}].weight"
                value="${weight}"
                min="0.01" step="0.01" placeholder="e.g 30.75" inputmode="decimal" required />
        </td>
        <td style="min-width: 140px; padding-right: 5px;">
          <input type="number" class="form-control item-quantity"
                name="items[${rowIndex}].quantity"
                value="${quantity}"
                min="1" step="1" required />
        </td>
        <td style="width: 1%; white-space: nowrap;">
          <button type="button" class="btn btn-outline-danger btn-sm remove-item-btn">
            <i class="bx bx-trash"></i>
          </button>
        </td>
      `;

      const removeBtn = row.querySelector('.remove-item-btn');
      removeBtn.addEventListener('click', function () {
        if (tbody.rows.length > 1) {
          row.remove();
          updateItemsIndexes();
        } else {
          alert('At least one item is required.');
        }
      });

      tbody.appendChild(row);
    }

    function updateItemsIndexes() {
      const tbody = document.getElementById('liftedItemsBody');
      if (!tbody) return;

      const rows = tbody.querySelectorAll('tr');
      rows.forEach((row, index) => {
        row.querySelectorAll('input').forEach(input => {
          const name = input.getAttribute('name');
          if (name) {
            input.setAttribute('name', name.replace(/items\[\d+\]/, `items[${index}]`));
          }
        });
      });
    }

    function validateForm() {
      let toastShown = false;
      let isValid = true;

      if (!validateDates()) isValid = false;

      // Per-date validation – each date row with enabled shifts must have ≥1 checked
      // Clear previous highlights
      document.querySelectorAll('#shiftTableBody tr').forEach(r => r.classList.remove('table-danger'));

      let missingSelection = false;
      const fullyBookedRows = [];
      const dateRows = Array.from(document.querySelectorAll('#shiftTableBody tr'));
      dateRows.forEach(row => {
        const enabledCheckboxes = row.querySelectorAll('.shift-checkbox:not([disabled])');
        // we already have enabledCheckboxes variable above
        const checkedCheckboxes = row.querySelectorAll('.shift-checkbox:checked');
        if (enabledCheckboxes.length === 0) {
          fullyBookedRows.push(row);
        } else if (checkedCheckboxes.length === 0) {
          missingSelection = true;
          row.classList.add('table-danger');
        }
      });

      if (fullyBookedRows.length > 0) {
        const datesTxt = fullyBookedRows.map(r => r.dataset.date).join(', ');
        document.getElementById('shiftTableError').textContent = `All shifts already booked on ${datesTxt}. Please select another date range.`;
        if (!toastShown) { showToast('Error', `All shifts already booked on ${datesTxt}. Please select another date range.`, 'error'); toastShown = true; }
        fullyBookedRows.forEach(r => r.classList.add('table-danger'));
        isValid = false;
      }

      if (missingSelection) {
        document.getElementById('shiftTableError').textContent = 'Please select at least one shift for each day in the selected period';
        if (!toastShown) { showToast('Error', 'Please select at least one shift for each day in the selected period', 'error'); toastShown = true; }
        isValid = false;
      }

      const selectedShifts = document.querySelectorAll('.shift-checkbox:checked');
      if (selectedShifts.length === 0) {
        document.getElementById('shiftTableError').textContent = 'Please select at least one shift';
        if(!toastShown){showToast('Error','Please select at least one shift','error');toastShown=true;}
        isValid = false;
      } else {
        document.getElementById('shiftTableError').textContent = '';
      }

      const items = document.querySelectorAll('#liftedItemsBody tr');
      let hasValidItem = false;
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const nameInput = item.querySelector('.item-name');
        const heightInput = item.querySelector('.item-height');
        const weightInput = item.querySelector('.item-weight');
        const quantityInput = item.querySelector('.item-quantity');

        if (nameInput?.value && heightInput?.value && weightInput?.value && quantityInput?.value) {
          hasValidItem = true;
          break;
        }
      }

      if (!hasValidItem) {
        document.getElementById('liftedItemsError').textContent = 'Please provide at least one item to be lifted';
        if(!toastShown){showToast('Error','Please provide at least one item to be lifted','error');toastShown=true;}
        isValid = false;
      } else {
        document.getElementById('liftedItemsError').textContent = '';
      }

      const selectedHazards = document.querySelectorAll('.hazard-checkbox:checked');
      const customHazardInput = document.getElementById('CustomHazard');
      const customHazardValue = (customHazardInput && customHazardInput.value) ? customHazardInput.value.trim() : '';

      const hazardsValid = selectedHazards.length > 0 || customHazardValue.length > 0;

      if (!hazardsValid) {
        document.getElementById('hazardsError').textContent = 'Please select at least one potential hazard or specify a custom hazard';
        if (!toastShown) {
          showToast('Error', 'Please select at least one potential hazard or specify a custom hazard', 'error');
          toastShown = true;
        }
        isValid = false;
      } else {
        document.getElementById('hazardsError').textContent = '';
      }

      return isValid;
    }

    document.addEventListener('DOMContentLoaded', function () {
        // New Image Preview Handler
        const newImagesInput = document.getElementById('newImages');
        const newImagePreviewContainer = document.getElementById('newImagePreviewContainer');

        if (newImagesInput && newImagePreviewContainer) {
            newImagesInput.addEventListener('change', function () {
                newImagePreviewContainer.innerHTML = ''; // Clear previous previews
                const files = this.files;
                if (files) {
                    Array.from(files).forEach(file => {
                        if (file.type.startsWith('image/')) {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                const img = document.createElement('img');
                                img.src = e.target.result;
                                img.classList.add('img-preview');
                                newImagePreviewContainer.appendChild(img);
                            }
                            reader.readAsDataURL(file);
                        }
                    });
                }
            });
        }

        // Numeric input normalization and validation for height & weight
        document.addEventListener('input', function (e) {
        if (e.target.classList.contains('item-height') || e.target.classList.contains('item-weight')) {
          // keep only digits, comma or dot and ensure only one dot
        let cleaned = e.target.value.replace(/[^0-9.,]/g, '');
        cleaned = cleaned.replace(/,/g, '.');
        const parts = cleaned.split('.');
        if (parts.length > 2) {
          cleaned = parts[0] + '.' + parts.slice(1).join('');
        }
        e.target.value = cleaned;
          }
        });

        document.addEventListener('keydown', function (e) {
          if (e.target.classList.contains('item-height') || e.target.classList.contains('item-weight')) {
            if (e.key === 'e' || e.key === 'E' || e.key === '+' || e.key === '-') {
              e.preventDefault();
            }
          }
        });

        // Image Deletion Modal Handler
        const deleteModal = document.getElementById('deleteConfirmationModal');
        let imagePathToDelete = null;

        deleteModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            imagePathToDelete = button.getAttribute('data-image-path');
        });

        document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
            if (imagePathToDelete) {
                // Create a hidden input to hold the path of the image to be deleted
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'ImagesToDelete';
                hiddenInput.value = imagePathToDelete;
                editBookingForm.appendChild(hiddenInput);

                // Hide the image wrapper from the view
                const imageWrapper = document.querySelector(`.existing-image-wrapper[data-image-path="${imagePathToDelete}"]`);
                if (imageWrapper) {
                    imageWrapper.style.display = 'none';
                }

                // Hide the modal
                const modalInstance = bootstrap.Modal.getInstance(deleteModal);
                modalInstance.hide();

                // Check if any existing images are left
                const remainingImages = document.querySelectorAll('.existing-image-wrapper[style*="display: none;"]');
                const totalImages = document.querySelectorAll('.existing-image-wrapper');
                if (remainingImages.length === totalImages.length) {
                    document.getElementById('no-existing-images-msg').style.display = 'block';
                }

                imagePathToDelete = null; // Reset for next deletion
            }
        });

      loadShiftDefinitions();
      initLiftedItemsTable();

      // Langsung generate shift table saat halaman dimuat
      generateShiftTable();

      // Event listeners untuk real-time update
      if (startDateInput) {
        startDateInput.addEventListener('change', generateShiftTable);
      }

      if (endDateInput) {
        endDateInput.addEventListener('change', generateShiftTable);
      }

      if (craneIdSelect) {
        craneIdSelect.addEventListener('change', generateShiftTable);
      }

      if (addItemBtn) {
        addItemBtn.addEventListener('click', () => addLiftedItemRow());
      }

      if (editBookingForm) {
        editBookingForm.addEventListener('submit', function (event) {
          if (!validateForm()) {
            event.preventDefault();
const firstError = document.querySelector('.table-danger') || document.querySelector('.text-danger:not(:empty)') || document.getElementById('shiftTableContainer');            if (firstError) {
              firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }
        });
      }
    });
  </script>
}
