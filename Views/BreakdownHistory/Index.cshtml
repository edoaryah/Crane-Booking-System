<!-- Views/BreakdownHistory/Index.cshtml -->
@model IEnumerable<AspnetCoreMvcFull.ViewModels.CraneManagement.BreakdownHistoryViewModel>
@{
  ViewData["Title"] = "Breakdown History";
  Layout = "_ContentNavbarLayout";

  int? craneId = ViewData["CraneId"] as int?;
}

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">
      @{
        string? craneCode = ViewData["CraneCode"] as string;
      }
      @if (craneId.HasValue)
      {
        if (!string.IsNullOrEmpty(craneCode))
        {
          <span>Breakdown History for Crane @craneCode</span>
        }
        else
        {
          <span>Breakdown History for Crane ID: @craneId</span>
        }
      }
      else
      {
        <span>All Breakdown History</span>
      }
    </h5>
    <div>
      @if (craneId.HasValue)
      {
        <a href="@Url.Action("Details", "CraneManagement", new { id = craneId })" class="btn btn-outline-secondary me-2">
          <i class="bx bx-arrow-back me-1"></i> Back to Crane
        </a>
      }
      <a href="@Url.Action("Index", "CraneManagement")" class="btn btn-outline-primary">
        <i class="bx bx-list-ul me-1"></i> All Cranes
      </a>
    </div>
  </div>

  <div class="table-responsive text-nowrap">
    <table class="table table-hover">
      <thead>
        <tr>
          <th>Crane Code</th>
          <th>Capacity</th>
          <th>Start Time</th>
          <th>End Time</th>
          <th>Actual End Time</th>
          <th>Duration</th>
          <th>Reason</th>
        </tr>
      </thead>
      <tbody class="table-border-bottom-0">
        @if (Model.Any())
        {
          @functions {
            private string FormatTimespan(TimeSpan ts)
            {
              var parts = new List<string>();
              if (ts.Days > 0)
              {
                parts.Add($"{ts.Days} Day{(ts.Days == 1 ? "" : "s")}");
              }
              if (ts.Hours > 0)
              {
                parts.Add($"{ts.Hours} Hour{(ts.Hours == 1 ? "" : "s")}");
              }
              // Always show minutes, even 0
              parts.Add($"{ts.Minutes} Minute{(ts.Minutes == 1 ? "" : "s")}");
              return string.Join(" ", parts);
            }
          }

          @foreach (var breakdown in Model)
          {
            var planned = FormatTimespan(breakdown.UrgentEndTime - breakdown.UrgentStartTime);
            var actual = breakdown.ActualUrgentEndTime.HasValue
              ? FormatTimespan(breakdown.ActualUrgentEndTime.Value - breakdown.UrgentStartTime)
              : "Not completed";

            <tr>
              <td>
                <a href="@Url.Action("Details", "CraneManagement", new { id = breakdown.CraneId })">
                  @breakdown.CraneCode
                </a>
              </td>
              <td>@breakdown.CraneCapacity ton</td>
              <td>@breakdown.UrgentStartTime.ToString("dd/MM/yyyy HH:mm")</td>
              <td>@breakdown.UrgentEndTime.ToString("dd/MM/yyyy HH:mm")</td>
              <td>
                @if (breakdown.ActualUrgentEndTime.HasValue)
                {
                  @breakdown.ActualUrgentEndTime.Value.ToString("dd/MM/yyyy HH:mm")
                }
                else
                {
                  <span class="badge bg-warning">Not completed</span>
                }
              </td>
              <td>
                <span class="badge bg-primary d-block mb-1">Planned: @planned</span>
                <span class="badge bg-info d-block">Actual: @actual</span>
              </td>
              <td>@breakdown.Reasons</td>
            </tr>
          }
        }
        else
        {
          <tr>
            <td colspan="7" class="text-center">No breakdown records found</td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>
