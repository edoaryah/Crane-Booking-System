@model AspnetCoreMvcFull.ViewModels.BookingManagement.CalendarResponseViewModel
@{
  ViewData["Title"] = "Crane Schedule";
  Layout = "_ContentNavbarLayout";
  bool isPic = ViewData["IsPicRole"] is bool pic && pic;
  bool isAdmin = ViewData["IsAdminRole"] is bool adm && adm;
  var userRolesList = ViewData["UserRoles"] as IEnumerable<string> ?? Enumerable.Empty<string>();
  // Define roles that should NOT see the New Booking button
  string[] elevatedRoles = new[] { "pic", "admin", "manager", "operator", "msd" };
  bool isRegularUser = !userRolesList.Any(r => elevatedRoles.Contains(r, StringComparer.OrdinalIgnoreCase));
  // Fallback: derive from ViewData["UserRoles"] or User claims if flag not set
  if (!isPic || !isAdmin)
  {
    if (ViewData["UserRoles"] is IEnumerable<string> roles)
    {
      if (!isPic) isPic = roles.Any(r => string.Equals(r, "pic", StringComparison.OrdinalIgnoreCase));
      if (!isAdmin) isAdmin = roles.Any(r => string.Equals(r, "admin", StringComparison.OrdinalIgnoreCase));
    }
    if (!isPic) isPic = User.IsInRole("pic");
    if (!isAdmin) isAdmin = User.IsInRole("admin");
  }
}

<!-- Card Calendar -->
<div class="card">
  <div class="card-header">
    <!--On large screens: 2 columns with justify-content-between -->
    <!-- On small screens: Stack vertically -->
    <div class="d-flex flex-column flex-md-row justify-content-between w-100">
      <!--Column 1: Date Range Text -->
      <div class="calendar-header-left">
        <h3 class="card-title mb-1 date-range-title" id="dateRangeText">
          @{
            var startDate = DateTime.Parse(Model.WeekRange.StartDate);
            var endDate = DateTime.Parse(Model.WeekRange.EndDate);
            var formattedStartDate = startDate.ToString("MMMM d");
            var formattedEndDate = endDate.ToString("MMMM d, yyyy");
          }
          @formattedStartDate - @formattedEndDate
          </h5>
          <!-- Legend -->
          <div class="calendar-legend mt-2 small">
            <span class="legend-item"><span class="legend-color status-pending"></span> Pending</span>
            <span class="legend-item"><span class="legend-color status-mgr-approved"></span> Manager Approved</span>
            <span class="legend-item"><span class="legend-color status-rejected"></span> Rejected</span>
            <span class="legend-item"><span class="legend-color status-pic-approved"></span> PIC Approved</span>
            <span class="legend-item"><span class="legend-color maintenance"></span> Maintenance</span>
          </div>
      </div>

      <!--Column 2: Contains buttons -->
      <div class="d-flex flex-row justify-content-between align-items-center calendar-header-actions">
        <!--New Booking button -->
        @if (isRegularUser)
        {
          <div>
            <a href="/Booking" class="btn btn-primary btn-new-booking" style="margin-right: 10px;">
              <i class="bx bx-plus me-1"></i> New Booking
            </a>
          </div>
        }

        <!--Prev / Next buttons -->
        <div>
          <div class="btn-group">
            <a asp-action="Calendar" asp-route-startDate="@startDate.AddDays(-7).ToString("yyyy-MM-dd")"
              class="btn btn-icon btn-outline-primary btn-nav @(startDate <= DateTime.Today ? "disabled" : "")">
              <span class="tf-icons bx bx-chevron-left"></span>
            </a>
            <a asp-action="Calendar" asp-route-startDate="@startDate.AddDays(7).ToString("yyyy-MM-dd")"
              class="btn btn-icon btn-outline-primary btn-nav">
              <span class="tf-icons bx bx-chevron-right"></span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Calendar Content Wrapper with Horizontal Scroll -->
  <div id="calendarContent" class="calendar-scroll-container">
    <!-- Section 2: Crane Data (Sticky Column) -->
    <div class="crane-data-column">
      <div class="crane-header">
        <div class="p-2">
          <div class="text-uppercase fw-bold">Crane ID</div>
          <div class="text-muted text-uppercase">Capacity</div>
        </div>
      </div>
      <div class="crane-list">
        @foreach (var crane in Model.Cranes)
        {
          <div class="crane-item" data-crane-id="@crane.CraneId">
            <div class="p-2">
              <div class="fw-bold">@crane.CraneId</div>
              <div class="text-muted">@crane.Capacity TON</div>
            </div>
          </div>
        }
      </div>
    </div>

    <!-- Section 3: Schedule Table -->
    <div class="schedule-table-container">
      <div class="date-headers-row">
        @for (int i = 0; i < 7; i++)
        {
          var currentDate = startDate.AddDays(i);
          <div class="date-header-cell">
            <div class="date-header p-2">
              <div class="day-name">@currentDate.ToString("ddd")</div>
              <div class="day-number">@currentDate.Day</div>
            </div>
          </div>
        }
      </div>

      <div class="schedule-rows">
        @foreach (var crane in Model.Cranes)
        {
          <div class="schedule-row" data-crane-id="@crane.CraneId">
            @for (int i = 0; i < 7; i++)
            {
              var currentDate = startDate.AddDays(i);
              <div class="schedule-cell" data-date="@currentDate.ToString("yyyy-MM-dd")">
                <div class="shift-container">
                  @{
                    // Ambil daftar shift definition dari ViewBag
                    var shiftDefinitions = ViewBag.ShiftDefinitions as
                    IEnumerable<AspnetCoreMvcFull.ViewModels.ShiftManagement.ShiftViewModel>;
                    if (shiftDefinitions != null && shiftDefinitions.Any())
                    {
                      foreach (var shift in shiftDefinitions)
                      {
                        <div class="shift-slot" data-shift-id="@shift.Id">
                          @{
                            // Cari booking untuk shift ini
                            var bookingsForDate = crane.Bookings.Where(b => b.Date.Date == currentDate.Date).ToList();
                            foreach (var booking in bookingsForDate)
                            {
                              var shiftsForBooking = booking.Shifts.Where(s => s.ShiftDefinitionId == shift.Id).ToList();
                              foreach (var bookingShift in shiftsForBooking)
                              {
                                // Tentukan class berdasarkan status booking
                                string statusClass = booking.Status switch
                                {
                                  AspnetCoreMvcFull.Models.BookingStatus.PendingApproval => "status-pending",
                                  AspnetCoreMvcFull.Models.BookingStatus.ManagerApproved => "status-mgr-approved",
                                  AspnetCoreMvcFull.Models.BookingStatus.ManagerRejected => "status-rejected",
                                  AspnetCoreMvcFull.Models.BookingStatus.PICApproved => "status-pic-approved",
                                  AspnetCoreMvcFull.Models.BookingStatus.PICRejected => "status-rejected",
                                  _ => "status-default"
                                };

                                string deptClass = "dept-default";
                                if (booking.Department.ToLower().Contains("stores") ||
                                booking.Department.ToLower().Contains("inventory"))
                                {
                                  deptClass = "dept-stores";
                                }

                                @if (isPic || isAdmin)
                                {
                                  <a href="/Booking/Details?documentNumber=@booking.DocumentNumber" class="booking-link">
                                    <div class="booking-card @statusClass @deptClass clickable"
                                      data-document-number="@booking.DocumentNumber" data-booking-number="@booking.BookingNumber"
                                      data-department="@booking.Department" data-shift-name="@bookingShift.ShiftName"
                                      data-start-time="@bookingShift.StartTime" data-end-time="@bookingShift.EndTime">
                                      <div class="booking-card-content">
                                        @{
                                          var displayDept = !string.IsNullOrEmpty(booking.Department) && booking.Department.Length > 18 ?
                                          booking.Department.Substring(0, 17) + "..." : booking.Department;
                                        }
                                        <div class="booking-dept">@displayDept</div>
                                        <div class="booking-name">@booking.Name</div>
                                      </div>
                                    </div>
                                  </a>
                                }
                                else
                                {
                                  <div class="booking-card @statusClass @deptClass" data-document-number="@booking.DocumentNumber"
                                    data-booking-number="@booking.BookingNumber" data-department="@booking.Department"
                                    data-shift-name="@bookingShift.ShiftName" data-start-time="@bookingShift.StartTime"
                                    data-end-time="@bookingShift.EndTime">
                                    <div class="booking-card-content">
                                      @{
                                        var displayDept = !string.IsNullOrEmpty(booking.Department) && booking.Department.Length > 18 ?
                                        booking.Department.Substring(0, 17) + "..." : booking.Department;
                                      }
                                      <div class="booking-dept">@displayDept</div>
                                      <div class="booking-name">@booking.Name</div>
                                    </div>
                                  </div>
                                }
                              }
                            }

                            // Cari maintenance untuk shift ini
                            var maintenanceForDate = crane.MaintenanceSchedules.Where(m => m.Date.Date ==
                            currentDate.Date).ToList();
                            foreach (var maintenance in maintenanceForDate)
                            {
                              var shiftsForMaintenance = maintenance.Shifts.Where(s => s.ShiftDefinitionId == shift.Id).ToList();
                              foreach (var maintenanceShift in shiftsForMaintenance)
                              {
                                <div class="maintenance-card" data-maintenance-id="@maintenance.Id"
                                  data-maintenance-title="@maintenance.Title" data-shift-name="@maintenanceShift.ShiftName"
                                  data-start-time="@maintenanceShift.StartTime" data-end-time="@maintenanceShift.EndTime">
                                  <div class="maintenance-content d-flex align-items-center h-100">
                                    <i class="bx bx-wrench me-1"></i>
                                    @* <span>@maintenance.Title</span> *@
                                    <span>Maintenance</span>
                                    @* <div class="maintenance-title">
                                      Maintenance
                                    </div> *@
                                  </div>
                                </div>
                              }
                            }
                          }
                        </div>
                      }
                    }
                    else
                    {
                      <div class="shift-slot">
                        <!-- Fallback jika tidak ada definisi shift -->
                      </div>
                    }
                  }
                </div>
              </div>
            }
          </div>
        }
      </div>
    </div>
  </div>
</div>

@section PageStyles {
  <link rel="stylesheet" href="~/css/calendar.css">
}

@section PageScripts
{
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Inisialisasi tooltip container
      if (!document.getElementById('calendar-tooltip')) {
        const tooltip = document.createElement('div');
        tooltip.id = 'calendar-tooltip';
        tooltip.className = 'calendar-tooltip';
        document.body.appendChild(tooltip);
      }

      // Setup tooltips untuk booking cards
      setupTooltips();

      // Setup click navigation for authorized users
      setupBookingCardClicks();
    });

    // Fungsi untuk mengatur tooltips
    function setupBookingCardClicks() {
      document.querySelectorAll('.booking-card.clickable').forEach(card => {
        card.addEventListener('click', function () {
          const docNum = this.dataset.documentNumber;
          if (docNum) {
            window.location = `/Booking/Details?documentNumber=${docNum}`;
          }
        });
      });
    }

    // Fungsi untuk mengatur tooltips
    function setupTooltips() {
      const tooltip = document.getElementById('calendar-tooltip');

      // Add event listeners to booking cards
      document.querySelectorAll('.booking-card').forEach(card => {
        card.addEventListener('mouseenter', function (e) {
          const bookingNumber = this.dataset.bookingNumber;
          const department = this.dataset.department;
          const shiftName = this.dataset.shiftName;
          const startTime = this.dataset.startTime ? this.dataset.startTime.substring(0, 5) : ''; // Format HH:MM
          const endTime = this.dataset.endTime ? this.dataset.endTime.substring(0, 5) : ''; // Format HH:MM

          tooltip.innerHTML = `
                                            <div class="calendar-tooltip-title">${bookingNumber}</div>
                                            <div class="calendar-tooltip-content">
                                                <div>Department: ${department}</div>
                                                <div>Shift: ${shiftName}</div>
                                                <div>Time: ${startTime} - ${endTime}</div>
                                            </div>
                                        `;

          // Position tooltip near the cursor
          tooltip.style.left = (e.pageX + 10) + 'px';
          tooltip.style.top = (e.pageY + 10) + 'px';
          tooltip.style.display = 'block';
        });

        card.addEventListener('mouseleave', function () {
          tooltip.style.display = 'none';
        });
      });

      // Add event listeners to maintenance cards
      document.querySelectorAll('.maintenance-card').forEach(card => {
        card.addEventListener('mouseenter', function (e) {
          const title = this.dataset.maintenanceTitle;
          const shiftName = this.dataset.shiftName;
          const startTime = this.dataset.startTime ? this.dataset.startTime.substring(0, 5) : ''; // Format HH:MM
          const endTime = this.dataset.endTime ? this.dataset.endTime.substring(0, 5) : ''; // Format HH:MM

          tooltip.innerHTML = `
                                            <div class="calendar-tooltip-title">Maintenance</div>
                                            <div class="calendar-tooltip-content">
                                                <div>Title: ${title}</div>
                                                <div>Shift: ${shiftName}</div>
                                                <div>Time: ${startTime} - ${endTime}</div>
                                            </div>
                                        `;

          // Position tooltip near the cursor
          tooltip.style.left = (e.pageX + 10) + 'px';
          tooltip.style.top = (e.pageY + 10) + 'px';
          tooltip.style.display = 'block';
        });

        card.addEventListener('mouseleave', function () {
          tooltip.style.display = 'none';
        });
      });
    }
  </script>
}
