@model AspnetCoreMvcFull.ViewModels.BookingManagement.BookingPagedViewModel
@{
  ViewData["Title"] = "Search Results";
}

@* <h4 class="fw-bold py-3 mb-4">
  <span class="text-muted fw-light">Booking /</span> Search Results
</h4> *@

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Search Results for: "@Model.SearchTerm"</h5>
  </div>

  <div class="card-body">
    @if (!Model.PagedBookings.Items.Any())
    {
      <div class="text-center my-4">
        <h6 class="text-muted">No bookings found matching the search term.</h6>
      </div>
    }
    else
    {
      <div class="table-responsive">
        <table class="table table-bordered table-hover">
          <thead>
            <tr>
              <th>Booking #</th>
              <th>Crane</th>
              <th>Name</th>
              <th>Department</th>
              <th>Date Range</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var booking in Model.PagedBookings.Items)
            {
              <tr>
                <td>@booking.BookingNumber</td>
                <td>@booking.CraneCode</td>
                <td>@booking.Name</td>
                <td>@booking.Department</td>
                <td>@booking.StartDate.ToString("dd MMM yyyy") - @booking.EndDate.ToString("dd MMM yyyy")</td>
                <td>
                  @{
                    string badgeClass = booking.Status switch
                    {
                      AspnetCoreMvcFull.Models.BookingStatus.PendingApproval => "bg-label-warning",
                      AspnetCoreMvcFull.Models.BookingStatus.ManagerApproved => "bg-label-info",
                      AspnetCoreMvcFull.Models.BookingStatus.ManagerRejected => "bg-label-danger",
                      AspnetCoreMvcFull.Models.BookingStatus.PICApproved => "bg-label-success",
                      AspnetCoreMvcFull.Models.BookingStatus.PICRejected => "bg-label-danger",
                      AspnetCoreMvcFull.Models.BookingStatus.Cancelled => "bg-label-secondary",
                      AspnetCoreMvcFull.Models.BookingStatus.Done => "bg-label-primary",
                      _ => "bg-label-secondary"
                    };
                  }
                  <span class="badge @badgeClass">@booking.Status</span>
                </td>
                <td>
                  <a href="@Url.Action("Details", "Booking", new { documentNumber = booking.DocumentNumber })"
                    class="btn btn-sm btn-info">
                    <i class="bx bx-detail me-1"></i> Details
                  </a>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
      <div class="card-footer d-flex justify-content-between align-items-center py-5 px-0 pb-0">
        <div>
          @(((Model.PagedBookings.PageNumber - 1) * Model.PagedBookings.PageSize) + 1) to
          @(Math.Min(Model.PagedBookings.PageNumber * Model.PagedBookings.PageSize, Model.PagedBookings.TotalCount))
          of @Model.PagedBookings.TotalCount entries
        </div>
        @* <div class="btn-group m-0">
          <a class="btn btn-outline-primary @(Model.PagedBookings.HasPreviousPage ? "" : "disabled")"
            href="@Url.Action("Search", new { searchTerm = Model.SearchTerm, pageNumber = Model.PagedBookings.PageNumber - 1 })"><i
              class="bx bx-chevron-left"></i></a>
          @for (var i = 1; i <= Model.PagedBookings.PageCount; i++)
          {
            <a class="btn @(Model.PagedBookings.PageNumber == i ? "btn-primary" : "btn-outline-primary")"
              href="@Url.Action("Search", new { searchTerm = Model.SearchTerm, pageNumber = i })">@i</a>
          }
          <a class="btn btn-outline-primary @(Model.PagedBookings.HasNextPage ? "" : "disabled")"
            href="@Url.Action("Search", new { searchTerm = Model.SearchTerm, pageNumber = Model.PagedBookings.PageNumber + 1 })"><i
              class="bx bx-chevron-right"></i></a>
        </div> *@
        <div class="pagination-container text-center mx-auto"></div>
        <div class="btn-group pagination-group">
          <a href="@Url.Action("Search", new { searchTerm = Model.SearchTerm, pageNumber = Model.PagedBookings.PageNumber - 1 })"
            class="btn btn-icon btn-outline-primary @(Model.PagedBookings.HasPreviousPage ? "" : "disabled")"
            aria-label="Previous" @(Model.PagedBookings.HasPreviousPage ? "" : "aria-disabled=\"true\"")>
            <i class="tf-icon bx bx-chevron-left"></i>
          </a>
          @{
            int startPage = Math.Max(1, Model.PagedBookings.PageNumber - 2);
            int endPage = Math.Min(Model.PagedBookings.PageCount, startPage + 4);
            if (endPage - startPage < 4 && endPage < Model.PagedBookings.PageCount)
            {
              endPage = Math.Min(Model.PagedBookings.PageCount, endPage + (4 - (endPage - startPage)));
            }
            if (endPage - startPage < 4 && startPage > 1)
            {
              startPage = Math.Max(1, startPage - (4 - (endPage - startPage)));
            }
          }

          @for (int i = startPage; i <= endPage; i++)
          {
            <a href="@Url.Action("Search", new { searchTerm = Model.SearchTerm, pageNumber = i })"
              class="btn @(Model.PagedBookings.PageNumber == i ? "btn-primary" : "btn-outline-primary")"
              data-page="@i">@i</a>
          }
          <a href="@Url.Action("Search", new { searchTerm = Model.SearchTerm, pageNumber = Model.PagedBookings.PageNumber + 1 })"
            class="btn btn-icon btn-outline-primary @(Model.PagedBookings.HasNextPage ? "" : "disabled")"
            aria-label="Next" @(Model.PagedBookings.HasNextPage ? "" : "aria-disabled=\"true\"")>
            <i class="tf-icon bx bx-chevron-right"></i>
          </a>
        </div>
      </div>
    }

  </div>
</div>
